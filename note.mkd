# 实验方案

## 位姿表示方法


### 位置表示方法
配置项：
```python
pos_type
```

#### 笛卡尔坐标表示方法(Cart)

#### 球坐标表示方法(Spher)

#### 离散球坐标表示方法(DiscreteSpher)


### 姿态表示方法
配置项：
```python
ori_type
```

#### 四元数表示方法(Quat)

#### 欧拉角表示方法(Euler)

#### 离散欧拉角表示方法(DiscreteEuler)


### 损失函数
配置项：
```python
pos_loss_type
ori_loss_type
```
#### 回归损失函数
L1损失，L2损失，SmoothL1损失

#### 欧拉角损失函数
余弦相似度、余弦距离、指数余弦距离

#### 概率分布损失函数
交叉熵损失函数、KL散度、JS


### 实验

#### 位置表示方法实验与损失函数
位置表示方法的对比实验，对比不同表示方法以及对应的损失函数
使用轻量化的resnet18作为骨干网络，不使用neck，仅使用最后一层的特征进行预测
配置项
```python
exp_type            # pos_exp
backbone            # resnet18，骨干网络使用resnet18
neck                # TailNeck, 不适用neck 
pos_ratio           # 0.5, 最后仅有一半特征预测位置
pos_type            # 枚举所有位置表示方法
pos_loss_type       # 枚举所有位置损失函数
r_stride            # 枚举 1, 2, 5, 10 四种 r_stride
angle_stride        # 枚举 1, 2, 5, 10 四种 angle_stride
neighbor            # 枚举 1, 2, 3 三种 neighbor
alpha               # 枚举 0.01, 0.1, 0.2, 0.3 四种 alpha
ori_type            # Quat，不起作用
ori_loss_type       # Cos，不起作用
ALPHA               # (1, 0)，仅考虑位置的分数
BETA                # (1, 0)，仅考虑位置的损失
```

```bash
# 笛卡尔坐标位置表示，不同损失函数
python3 train.py --exp_type pos_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Cart --pos_loss_type L1 --ori_type Quat --ori_loss_type Cos --AlPHA 1 0 --BETA 1 0  # 笛卡尔坐标表示，L1 损失
python3 train.py --exp_type pos_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Cart --pos_loss_type L2 --ori_type Quat --ori_loss_type Cos --AlPHA 1 0 --BETA 1 0  # 笛卡尔坐标表示，L2 损失
python3 train.py --exp_type pos_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Cart --pos_loss_type SmoothL1 --ori_type Quat --ori_loss_type Cos --AlPHA 1 0 --BETA 1 0  # 笛卡尔坐标表示,SmoothL1 损失
# 球坐标位置表示，不同损失函数
python3 train.py --exp_type pos_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Spher --pos_loss_type L1 --ori_type Quat --ori_loss_type Cos --AlPHA 1 0 --BETA 1 0  # 球坐标表示，L1 损失
python3 train.py --exp_type pos_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Spher --pos_loss_type L2 --ori_type Quat --ori_loss_type Cos --AlPHA 1 0 --BETA 1 0  # 球坐标表示，L2 损失
python3 train.py --exp_type pos_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Spher --pos_loss_type SmoothL1 --ori_type Quat --ori_loss_type Cos --AlPHA 1 0 --BETA 1 0  # 球坐标表示，SmoothL1 损失
# 离散球坐标位置表示，不同参数
# 确定stride
python3 train.py --exp_type pos_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type DiscreteSpher --pos_loss_type CE --r_stride 1 --angle_stride 1 --ori_type Quat --ori_loss_type Cos --AlPHA 1 0 --BETA 1 0  # 离散球坐标表示，CE 损失，stride 为 1
python3 train.py --exp_type pos_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type DiscreteSpher --pos_loss_type CE --r_stride 2 --angle_stride 2 --ori_type Quat --ori_loss_type Cos --AlPHA 1 0 --BETA 1 0  # 离散球坐标表示，CE 损失，stride 为 2
python3 train.py --exp_type pos_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type DiscreteSpher --pos_loss_type CE --r_stride 5 --angle_stride 5 --ori_type Quat --ori_loss_type Cos --AlPHA 1 0 --BETA 1 0  # 离散球坐标表示，CE 损失，stride 为 5
python3 train.py --exp_type pos_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type DiscreteSpher --pos_loss_type CE --r_stride 10 --angle_stride 10 --ori_type Quat --ori_loss_type Cos --AlPHA 1 0 --BETA 1 0  # 离散球坐标表示，CE 损失，stride 为 10
# 在 stride 为 best_stride，neighbor 为 3 的基础上确定 alpha
best_stride = 
python3 train.py --exp_type pos_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type DiscreteSpher --pos_loss_type CE --r_stride best_stride --angle_stride best_stride --discrete_spher_neighbor 3 --discrete_spher_alpha 0.01 --ori_type Quat --ori_loss_type Cos --AlPHA 1 0 --BETA 1 0  # 离散球坐标表示，CE 损失，stride 为 best_stride，neighbor 为 3，alpha 为 0.01
python3 train.py --exp_type pos_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type DiscreteSpher --pos_loss_type CE --r_stride best_stride --angle_stride best_stride --discrete_spher_neighbor 3 --discrete_spher_alpha 0.1 --ori_type Quat --ori_loss_type Cos --AlPHA 1 0 --BETA 1 0  # 离散球坐标表示，CE 损失，stride 为 best_stride，neighbor 为 3，alpha 为 0.1
python3 train.py --exp_type pos_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type DiscreteSpher --pos_loss_type CE --r_stride best_stride --angle_stride best_stride --discrete_spher_neighbor 3 --discrete_spher_alpha 0.2 --ori_type Quat --ori_loss_type Cos --AlPHA 1 0 --BETA 1 0  # 离散球坐标表示，CE 损失，stride 为 best_stride，neighbor 为 3，alpha 为 0.2
python3 train.py --exp_type pos_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type DiscreteSpher --pos_loss_type CE --r_stride best_stride --angle_stride best_stride --discrete_spher_neighbor 3 --discrete_spher_alpha 0.3 --ori_type Quat --ori_loss_type Cos --AlPHA 1 0 --BETA 1 0  # 离散球坐标表示，CE 损失，stride 为 best_stride，neighbor 为 3，alpha 为 0.3
# 在 stride 为 best_stride，alpha 为 best_alpha 的基础上确定 neighbor
best_stride = 
best_alpha = 
python3 train.py --exp_type pos_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type DiscreteSpher --pos_loss_type CE --r_stride best_stride --angle_stride best_stride --discrete_spher_neighbor 1 --discrete_spher_alpha best_alpha --ori_type Quat --ori_loss_type Cos --AlPHA 1 0 --BETA 1 0  # 离散球坐标表示，CE 损失，stride 为 best_stride，neighbor 为 1，alpha 为 best_alpha
python3 train.py --exp_type pos_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type DiscreteSpher --pos_loss_type CE --r_stride best_stride --angle_stride best_stride --discrete_spher_neighbor 2 --discrete_spher_alpha best_alpha --ori_type Quat --ori_loss_type Cos --AlPHA 1 0 --BETA 1 0  # 离散球坐标表示，CE 损失，stride 为 best_stride，neighbor 为 2，alpha 为 best_alpha
# 在 stride 为 best_stride，alpha 为 best_alpha，neighbor 为 best_neigbhor 的基础上确定损失函数
best_stride = 
best_alpha = 
best_neigbhor = 
python3 train.py --exp_type pos_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type DiscreteSpher --pos_loss_type KL --r_stride best_stride --angle_stride best_stride --discrete_spher_neighbor best_neigbhor --discrete_spher_alpha best_alpha --ori_type Quat --ori_loss_type Cos --AlPHA 1 0 --BETA 1 0  # 离散球坐标表示，KL 损失，stride 为 best_stride，neighbor 为 2，alpha 为 0.1
python3 train.py --exp_type pos_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type DiscreteSpher --pos_loss_type JS --r_stride best_stride --angle_stride best_stride --discrete_spher_neighbor best_neigbhor --discrete_spher_alpha best_alpha --ori_type Quat --ori_loss_type Cos --AlPHA 1 0 --BETA 1 0  # 离散球坐标表示，JS 损失，stride 为 best_stride，neighbor 为 2，alpha 为 0.1
```

#### 姿态表示方法实验与损失函数
姿态表示方法的对比实验，对比不同表示方法以及对应的损失函数
使用轻量化的resnet18作为骨干网络，不使用neck，仅使用最后一层的特征进行预测
配置项
```python
exp_type            # ori_exp
backbone            # resnet18，骨干网络使用resnet18
neck                # TailNeck, 不适用neck 
pos_ratio           # 0.5, 最后仅有一半特征预测姿态
pos_type            # Cart，不起作用
pos_loss_type       # L1，不起作用
ori_type            # 枚举所有姿态表示方法
ori_loss_type       # 枚举所有姿态损失函数
stride              # 枚举 1, 2, 5, 10 四种 stride
neighbor            # 枚举 1, 2, 3 三种 neighbor
alpha               # 枚举 0.01, 0.1, 0.2, 0.3 四种 alpha
ALPHA               # (0, 1)，仅考虑位置的分数
BETA                # (0, 1)，仅考虑位置的损失
```

```bash
# 四元数姿态表示，不同损失函数
python3 train.py --exp_type ori_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Cart --pos_loss_type L1 --ori_type Quat --ori_loss_type Cos --AlPHA 0 1 --BETA 0 1  # 四元数表示，Cos 损失
python3 train.py --exp_type ori_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Cart --pos_loss_type L1 --ori_type Quat --ori_loss_type CosDistance --AlPHA 0 1 --BETA 0 1  # 四元数表示，CosDistance 损失
python3 train.py --exp_type ori_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Cart --pos_loss_type L1 --ori_type Quat --ori_loss_type ExpCos --AlPHA 0 1 --BETA 0 1  # 四元数表示，ExpCos 损失
# 欧拉角姿态表示，不同损失函数
python3 train.py --exp_type ori_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Cart --pos_loss_type L1 --ori_type Euler --ori_loss_type L1 --AlPHA 0 1 --BETA 0 1  # 四元数表示，L1 损失
python3 train.py --exp_type ori_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Cart --pos_loss_type L1 --ori_type Euler --ori_loss_type L2 --AlPHA 0 1 --BETA 0 1  # 四元数表示，L2 损失
python3 train.py --exp_type ori_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Cart --pos_loss_type L1 --ori_type Euler --ori_loss_type SmoothL1 --AlPHA 0 1 --BETA 0 1  # 四元数表示，SmoothL1 损失
# 离散欧拉角姿态表示，不同参数
# 确定stride
python3 train.py --exp_type ori_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Cart --pos_loss_type L1 --ori_type DiscreteEuler --ori_loss_type CE --stride 1 --AlPHA 0 1 --BETA 0 1  # 离散欧拉角姿态表示，CE 损失，stride 为 1
python3 train.py --exp_type ori_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Cart --pos_loss_type L1 --ori_type DiscreteEuler --ori_loss_type CE --stride 2 --AlPHA 0 1 --BETA 0 1  # 离散欧拉角姿态表示，CE 损失，stride 为 2
python3 train.py --exp_type ori_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Cart --pos_loss_type L1 --ori_type DiscreteEuler --ori_loss_type CE --stride 5 --AlPHA 0 1 --BETA 0 1  # 离散欧拉角姿态表示，CE 损失，stride 为 5
python3 train.py --exp_type ori_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Cart --pos_loss_type L1 --ori_type DiscreteEuler --ori_loss_type CE --stride 10 --AlPHA 0 1 --BETA 0 1  # 离散欧拉角姿态表示，CE 损失，stride 为 10
# 在 stride 为 best_stride，neighbor 为 3 的基础上确定 alpha
best_stride = 
python3 train.py --exp_type ori_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Cart --pos_loss_type L1 --ori_type DiscreteEuler --ori_loss_type CE --stride best_stride --discrete_euler_neighbor 3 --discrete_euler_alpha 0.01 --AlPHA 0 1 --BETA 0 1  # 离散欧拉角姿态表示，CE 损失，stride 为 best_stride，neighbor 为 3，alpha 为 0.01
python3 train.py --exp_type ori_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Cart --pos_loss_type L1 --ori_type DiscreteEuler --ori_loss_type CE --stride best_stride --discrete_euler_neighbor 3 --discrete_euler_alpha 0.1 --AlPHA 0 1 --BETA 0 1  # 离散欧拉角姿态表示，CE 损失，stride 为 best_stride，neighbor 为 3，alpha 为 0.1
python3 train.py --exp_type ori_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Cart --pos_loss_type L1 --ori_type DiscreteEuler --ori_loss_type CE --stride best_stride --discrete_euler_neighbor 3 --discrete_euler_alpha 0.2 --AlPHA 0 1 --BETA 0 1  # 离散欧拉角姿态表示，CE 损失，stride 为 best_stride，neighbor 为 3，alpha 为 0.2
python3 train.py --exp_type ori_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Cart --pos_loss_type L1 --ori_type DiscreteEuler --ori_loss_type CE --stride best_stride --discrete_euler_neighbor 3 --discrete_euler_alpha 0.3 --AlPHA 0 1 --BETA 0 1  # 离散欧拉角姿态表示，CE 损失，stride 为 best_stride，neighbor 为 3，alpha 为 0.3
# 在 stride 为 best_stride，alpha 为 best_alpha 的基础上确定 neighbor
best_stride = 
best_alpha = 
python3 train.py --exp_type ori_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Cart --pos_loss_type L1 --ori_type DiscreteEuler --ori_loss_type CE --stride best_stride --discrete_euler_neighbor 1 --discrete_euler_alpha best_alpha --AlPHA 0 1 --BETA 0 1  # 离散欧拉角姿态表示，CE 损失，stride 为 best_stride，neighbor 为 1，alpha 为 best_alpha
python3 train.py --exp_type ori_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Cart --pos_loss_type L1 --ori_type DiscreteEuler --ori_loss_type CE --stride best_stride --discrete_euler_neighbor 2 --discrete_euler_alpha best_alpha --AlPHA 0 1 --BETA 0 1  # 离散欧拉角姿态表示，CE 损失，stride 为 best_stride，neighbor 为 2，alpha 为 best_alpha
# 在 stride 为 5，alpha 为 0.1，neighbor 为 2 的基础上确定损失函数
best_stride = 
best_alpha = 
best_neighbor = 
python3 train.py --exp_type ori_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Cart --pos_loss_type L1 --ori_type DiscreteEuler --ori_loss_type KL --stride best_stride --discrete_euler_neighbor best_neighbor --discrete_euler_alpha best_alpha --AlPHA 0 1 --BETA 0 1  # 离散欧拉角姿态表示，KL 损失，stride 为 best_stride，neighbor 为 best_neighbor，alpha 为 best_alpha
python3 train.py --exp_type ori_exp --backbone resnet18 --neck TailNeck --pos_ratio 0.5 --pos_type Cart --pos_loss_type L1 --ori_type DiscreteEuler --ori_loss_type JS --stride best_stride --discrete_euler_neighbor best_neighbor --discrete_euler_alpha best_alpha --AlPHA 0 1 --BETA 0 1  # 离散欧拉角姿态表示，JS 损失，stride 为 best_stride，neighbor 为 best_neighbor，alpha 为 best_alpha
```

## 网络结构

### 骨干网络
MobileNetv4-small
MobileNetv4-medium
MobileNetv4-Large

配置项：
```python
backbone
```

### 特征融合网络
仅使用最后一层输出
使用三层输出
使用三层输出后经过一个卷积层
PAFPN
BiFPN
DensFPN

配置项：
```python
neck
att_type
```

### 位姿估计头
avg_size

配置项：
```python
avg_size
```

### 实验

#### 特征融合网络对比实验
使用 MobileNetv4-medium 作为骨干网络
配置项：
```python
exp_type            # neck_exp
backbone            # 骨干网络
neck                # 特征融合网络
att_type            # 特征融合网络中使用的注意力机制
pos_ratio           # 位置特征比例，为 0.5
avg_size            # (1, 1, 1) 不同层次特征图的 global average pool 大小
```

需要修改以下参数为之前位姿表示实验的的最佳结果
```python
# 位置表示
config.pos_type = "DiscreteSpher"   # 离散球坐标位置表示
config.pos_args["DiscreteSpher"]["r_stride"]
config.pos_args["DiscreteSpher"]["angle_stride"]
config.pos_args["DiscreteSpher"]["alpha"]
config.pos_args["DiscreteSpher"]["neighbor"]

# 姿态表示
config.ori_type = "DiscreteEuler"
config.ori_args["DiscreteEuler"]["stride"]
config.ori_args["DiscreteEuler"]["alpha"]
config.ori_args["DiscreteEuler"]["neighbor"]

# 位置损失函数
config.pos_loss_type

# 姿态损失函数
config.ori_loss_type
```

```bash
# 提前修改默认配置为位姿表示实验的结果！！！！
# 融合网络对比实验
python3 train.py --exp_type neck_exp --backbone mobilenetv4_conv_medium --neck TaileNeck --pos_ratio 0.5 --avg_size 1 1 1
python3 train.py --exp_type neck_exp --backbone mobilenetv4_conv_medium --neck IdentityNeck --pos_ratio 0.5 --avg_size 1 1 1
python3 train.py --exp_type neck_exp --backbone mobilenetv4_conv_medium --neck ConvNeck --pos_ratio 0.5 --avg_size 1 1 1
python3 train.py --exp_type neck_exp --backbone mobilenetv4_conv_medium --neck PAFPN --pos_ratio 0.5 --avg_size 1 1 1
python3 train.py --exp_type neck_exp --backbone mobilenetv4_conv_medium --neck BiFPN --pos_ratio 0.5 --avg_size 1 1 1
python3 train.py --exp_type neck_exp --backbone mobilenetv4_conv_medium --neck DensAttFPN --pos_ratio 0.5 avg_size 1 1 1    # 未使用注意力机制
python3 train.py --exp_type neck_exp --backbone mobilenetv4_conv_medium --neck DensAttFPN --att_type SE --pos_ratio 0.5 --avg_size 1 1 1  # 使用 SE 注意力机制
python3 train.py --exp_type neck_exp --backbone mobilenetv4_conv_medium --neck DensAttFPN --att_type SAM --pos_ratio 0.5 --avg_size 1 1 1  # 使用 SAM 注意力机制
python3 train.py --exp_type neck_exp --backbone mobilenetv4_conv_medium --neck DensAttFPN --att_type CBAM --pos_ratio 0.5 --avg_size 1 1 1  # 使用 CBAM 注意力机制
python3 train.py --exp_type neck_exp --backbone mobilenetv4_conv_medium --neck DensAttFPN --att_type SSIA --pos_ratio 0.5 --avg_size 1 1 1  # 使用 SSIA 注意力机制
```

#### 位姿估计头对比实验
使用 MobileNetv4-medium 作为骨干网络
使用 SSIA-DensAttFPN 作为特征融合网络
对比不同的 avg_size 和 pos_ratio

配置项
```python
exp_type                # head_exp
avg_size                
pos_ratio
```

需要修改以下参数为之前位姿表示实验的最佳结果
```python
config.neck
config.att_type
```

```bash
# 提前修改默认配置为位姿表示实验以及特征融合网络实验的结果！！！！
# avg_size 对比试验，pos_ratio 设置为 0.5
python3 train.py --exp_type head_exp --avg_size 1 1 1 --pos_ratio 0.5
python3 train.py --exp_type head_exp --avg_size 2 2 2 --pos_ratio 0.5
python3 train.py --exp_type head_exp --avg_size 4 4 4 --pos_ratio 0.5
python3 train.py --exp_type head_exp --avg_size 1 2 4 --pos_ratio 0.5
# pos_ratio 对比实验
python3 train.py --exp_type head_exp --avg_size 1 2 4 --pos_ratio 0.2
python3 train.py --exp_type head_exp --avg_size 1 2 4 --pos_ratio 0.4
python3 train.py --exp_type head_exp --avg_size 1 2 4 --pos_ratio 0.6
python3 train.py --exp_type head_exp --avg_size 1 2 4 --pos_ratio 0.8
```